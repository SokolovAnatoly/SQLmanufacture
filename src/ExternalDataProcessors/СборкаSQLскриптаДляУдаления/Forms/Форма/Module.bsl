
&НаСервере
Процедура УдалитьТЧДокументовНаСервере()
	
 ЗаполнитьМетаданные();
 УдалитьТабличныеЧастиДокументов();
 
 Сообщить("Готово удаление табличных частей");
 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТЧДокументов(Команда)
	УдалитьТЧДокументовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМетаданные()
	
	ТаблицаМетаданных.Очистить();
	
	ВыбФайл = Новый Файл(ИмяФайла);
	
	Если ВыбФайл.Существует() Тогда 
		
		Текст = Новый ЧтениеТекста(ИмяФайла);	
		Строка = Текст.ПрочитатьСтроку();
		
		ТекущийОбъект = Новый Структура;
		ТекущийРеквизит = Новый Структура;
		
		Пока Строка <> Неопределено Цикл 
			
			Строка = Текст.ПрочитатьСтроку();
			СтрокаМ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, "	"); // пробел поставил ТАБ
			
			Если СтрокаМ.Количество() > 0 Тогда	
				Если СокрЛП(СтрокаМ[0]) <> "" Тогда
					ТекущийОбъект.Очистить();
					
					МассивИмяТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(СтрокаМ[0]), ".");	
					ТекущийОбъект.Вставить("ИмяТаблицы", МассивИмяТаблицы[0] + "." + МассивИмяТаблицы[1]);
					
					ТекущийОбъект.Вставить("Метаданные", СокрЛП(СтрокаМ[1]));
					ТекущийОбъект.Вставить("Назначение", СокрЛП(СтрокаМ[2]));
					ТекущийОбъект.Вставить("ИмяТаблицыХранения", СокрЛП(СтрокаМ[3])); 
					ТекущийРеквизит.Очистить();
				КонецЕсли;
				
				Если СокрЛП(СтрокаМ[4]) <> "" Тогда
					ТекущийРеквизит.Очистить();
					
					ТекущийРеквизит.Вставить("Поле", СокрЛП(СтрокаМ[4]));
					ТекущийРеквизит.Вставить("ПолеSQL", СокрЛП(СтрокаМ[5]));
				КонецЕсли;
				
				Нов = ТаблицаМетаданных.Добавить();
				ЗаполнитьЗначенияСвойств(Нов, ТекущийОбъект);
				ЗаполнитьЗначенияСвойств(Нов, ТекущийРеквизит);
				
			КонецЕсли;
		КонецЦикла; 
		
		Текст.Закрыть();
		
	Иначе	
		Сообщить("Файл не найден!");	
	КонецЕсли; 	
		
КонецПроцедуры	 


&НаСервере
Процедура УдалитьТабличныеЧастиДокументов() 
	
	Текст = Новый ЗаписьТекста("\\192.168.222.5\dataAPT\OFFICE\PortPotrObmen\ЛОТ2\Листинг\ТЧдокументов.txt", КодировкаТекста.UTF8);
 	
	Для Каждого Стр Из Метаданные.Документы Цикл
					
		РеквизитТипаОрганизация = "";
		ПолучитьРеквизитТипаОрганизация(РеквизитТипаОрганизация , "Документ", Стр);	
		
		Если РеквизитТипаОрганизация <> "" Тогда
	
			ТЧ = Неопределено;
			ПолучитьМетаданные(ТЧ, "Документ." + Стр.Имя, "ТабличнаяЧасть");
			
			Реквизиты = Неопределено;
			ПолучитьМетаданные(Реквизиты, "Документ." + Стр.Имя, "Основная");
			
			ПолеОрганизация = Неопределено;
			ПолучитьПолеSQL(ПолеОрганизация, Реквизиты, РеквизитТипаОрганизация);
			
			ПолеСсылка = Неопределено;
			ПолучитьПолеSQL(ПолеСсылка, ТЧ, "Ссылка");
			
			Текст.ЗаписатьСтроку("-- Документ " + Стр.Имя);
			Текст.ЗаписатьСтроку("");
			
			ТЧ.Свернуть("ИмяТаблицыХранения, ИмяТаблицы");
			
			Для Каждого ТекТЧ Из ТЧ Цикл
				
				Текст.ЗаписатьСтроку("-- ТЧ " + ТекТЧ.ИмяТаблицы);
				Текст.ЗаписатьСтроку("");
				УдалитьТЧ(Реквизиты[0].ИмяТаблицыХранения, ТекТЧ.ИмяТаблицыХранения, ПолеОрганизация, ПолеСсылка, Текст);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	Текст.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УдалениеДокументов(ВеткаМетаданных, ВеткаМетаданныхОтбор) 
	
	Текст = Новый ЗаписьТекста(КаталогРезультатта + "\" + ВеткаМетаданных + ".txt", КодировкаТекста.UTF8);
 	
	Для Каждого Стр Из Метаданные[ВеткаМетаданных] Цикл	 
			
		РеквизитТипаОрганизация = "";
		ПолучитьРеквизитТипаОрганизация(РеквизитТипаОрганизация , ВеткаМетаданныхОтбор, Стр);	
		
		Если РеквизитТипаОрганизация <> "" Тогда
					
			Реквизиты = Неопределено;
			ПолучитьМетаданные(Реквизиты, ВеткаМетаданныхОтбор + "." + Стр.Имя, "Основная");
			
			ПолеОрганизация = Неопределено;
			ПолучитьПолеSQL(ПолеОрганизация, Реквизиты, РеквизитТипаОрганизация);
			
			Текст.ЗаписатьСтроку("-- " + ВеткаМетаданныхОтбор + " " + Стр.Имя);
			Текст.ЗаписатьСтроку("");
			
			Реквизиты.Свернуть("ИмяТаблицыХранения, ИмяТаблицы");
			
			Для Каждого ТекРек Из Реквизиты Цикл
				
				УдалитьДок(ТекРек.ИмяТаблицыХранения, ПолеОрганизация, Текст);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;	
	
	Текст.Закрыть(); 
	
КонецПроцедуры


 &НаСервере
Процедура УдалениеПодчиненныхСправочников() 
	
	Текст = Новый ЗаписьТекста(КаталогРезультатта + "\ПодчиненныеСправочники.txt", КодировкаТекста.UTF8);
 	
	Для Каждого Стр Из Метаданные.Справочники Цикл	
		Если ЭтоПодчиненныйСправочник(Стр, "Организации") Тогда
					
			Реквизиты = Неопределено;
			ПолучитьМетаданные(Реквизиты, "Справочник." + Стр.Имя, "Основная");
			
			Текст.ЗаписатьСтроку("-- Справочник " + Стр.Имя);
			Текст.ЗаписатьСтроку("");
			
			Реквизиты.Свернуть("ИмяТаблицыХранения, ИмяТаблицы");
			
			Для Каждого ТекРек Из Реквизиты Цикл
				
				УдалитьПодчиненныйСправочник(ТекРек.ИмяТаблицыХранения, Текст);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;	
	
	Текст.Закрыть(); 
	
КонецПроцедуры	

&НаСервере
Функция ЭтоПодчиненныйСправочник(ОбъектМетаданных, ИмяСправочника)

Подчиненный = Ложь;	

Для Каждого ТекВлад Из ОбъектМетаданных.Владельцы Цикл
	Если ТекВлад.Имя = ИмяСправочника Тогда  
		
		Подчиненный = Истина;	
	КонецЕсли;
КонецЦикла;

Возврат Подчиненный;

КонецФункции	

&НаСервере
Процедура ПолучитьРеквизитТипаОрганизация(РеквизитТипаОрганизация, ВеткаМетаданныхОтбор, ОбъектМетаданных)  
	
	Если ОбъектМетаданных.Имя = "Организации" Тогда
		Возврат;
	КонецЕсли;	
	
	Если ВеткаМетаданныхОтбор = "Документ" 
		Или ВеткаМетаданныхОтбор = "Справочник" Тогда
		
		Н = 0;	
		Пока Н <= ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл 
			Если ОбъектМетаданных.Реквизиты[Н].Тип = Новый ОписаниеТипов("СправочникСсылка.Организации") Тогда
				РеквизитТипаОрганизация = ОбъектМетаданных.Реквизиты[Н].Имя; 	
			КонецЕсли;
			Н = Н + 1;	
		КонецЦикла;	
		
	ИначеЕсли ВеткаМетаданныхОтбор = "РегистрНакопления"
		Или ВеткаМетаданныхОтбор = "РегистрСведений"
		Или ВеткаМетаданныхОтбор = "РегистрРасчета"
		Или ВеткаМетаданныхОтбор = "РегистрБухгалтерии" 
		Или ВеткаМетаданныхОтбор = "Справочники" Тогда
		
		Н = 0;	
		Пока Н <= ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл 
			Если ОбъектМетаданных.Реквизиты[Н].Тип = Новый ОписаниеТипов("СправочникСсылка.Организации") Тогда
				РеквизитТипаОрганизация = ОбъектМетаданных.Реквизиты[Н].Имя; 	
			КонецЕсли;
			Н = Н + 1;	
		КонецЦикла;	
		
		Если РеквизитТипаОрганизация = "" Тогда
			
			Н = 0;	
			Пока Н <= ОбъектМетаданных.Измерения.Количество() - 1 Цикл 
				Если ОбъектМетаданных.Измерения[Н].Тип = Новый ОписаниеТипов("СправочникСсылка.Организации") Тогда
					РеквизитТипаОрганизация = ОбъектМетаданных.Измерения[Н].Имя; 	
				КонецЕсли;
				Н = Н + 1;	
			КонецЦикла;		
		КонецЕсли;
		
	ИначеЕсли ВеткаМетаданныхОтбор = "ЖурналДокументов" Тогда
		
		Н = 0;	
		Пока Н <= ОбъектМетаданных.Графы.Количество() - 1 Цикл 
			
			Для Каждого ТекГрафа Из ОбъектМетаданных.Графы[Н].Ссылки Цикл
				
				Если ТекГрафа.Тип = Новый ОписаниеТипов("СправочникСсылка.Организации") Тогда
					РеквизитТипаОрганизация = ТекГрафа.Имя; 	
				КонецЕсли;   
	
			КонецЦикла;
						
			Н = Н + 1;	
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры	


&НаСервере
Процедура ПолучитьПолеSQL(ПолеSQL, Табл, Поле);

	Отбор = Новый Структура; 
	Отбор.Вставить("Поле", Поле);
	МассивОтбора = Табл.НайтиСтроки(Отбор);
		
	Для Каждого СтрМ Из МассивОтбора Цикл	
		ПолеSQL = СтрМ.ПолеSQL;	
	КонецЦикла; 	
		
КонецПроцедуры

&НаСервере
Процедура УдалитьТЧ(ИмяДокумента, ИмяТЧ, ПолеОрганизация, ПолеСсылка, Текст)
	
	
КодОрганизации = КодОрганизации(); 
Скрипт = ТабличнаяЧасть(); 

Скрипт = СтрЗаменить(Скрипт, "<ИмяДокумента>", ИмяДокумента);
Скрипт = СтрЗаменить(Скрипт, "<ИмяТЧ>", ИмяТЧ);
Скрипт = СтрЗаменить(Скрипт, "<КодОрганизации>", КодОрганизации); 
Скрипт = СтрЗаменить(Скрипт, "<ПолеОрганизация>", ПолеОрганизация);  
Скрипт = СтрЗаменить(Скрипт, "<ПолеСсылка>", ПолеСсылка);
Скрипт = СтрЗаменить(Скрипт, "<СправочникОрганизации>", СправочникОрганизации);
Скрипт = СтрЗаменить(Скрипт, "<ИдентификаторОрганизации>", ИдентификаторОрганизации);

Текст.ЗаписатьСтроку(Скрипт);
Текст.ЗаписатьСтроку("");
	
КонецПроцедуры	


&НаСервере
Процедура УдалитьДок(ИмяДокумента, ПолеОрганизация, Текст)
		
КодОрганизации = КодОрганизации(); 
Скрипт = Доки(); 

Скрипт = СтрЗаменить(Скрипт, "<ИмяДокумента>", ИмяДокумента);
Скрипт = СтрЗаменить(Скрипт, "<КодОрганизации>", КодОрганизации); 
Скрипт = СтрЗаменить(Скрипт, "<ПолеОрганизация>", ПолеОрганизация);  
Скрипт = СтрЗаменить(Скрипт, "<СправочникОрганизации>", СправочникОрганизации);
Скрипт = СтрЗаменить(Скрипт, "<ИдентификаторОрганизации>", ИдентификаторОрганизации);

Текст.ЗаписатьСтроку(Скрипт);
Текст.ЗаписатьСтроку("");
	
КонецПроцедуры	 

&НаСервере
Процедура УдалитьПодчиненныйСправочник(ИмяДокумента, Текст)
		
КодОрганизации = КодОрганизации(); 
Скрипт = ПодчиненныеСправочники(); 

Скрипт = СтрЗаменить(Скрипт, "<ИмяДокумента>", ИмяДокумента);
Скрипт = СтрЗаменить(Скрипт, "<КодОрганизации>", КодОрганизации);   
Скрипт = СтрЗаменить(Скрипт, "<СправочникОрганизации>", СправочникОрганизации);
Скрипт = СтрЗаменить(Скрипт, "<ИдентификаторОрганизации>", ИдентификаторОрганизации);

Текст.ЗаписатьСтроку(Скрипт);
Текст.ЗаписатьСтроку("");
	
КонецПроцедуры	 

&НаСервере
Процедура ПолучитьМетаданные(ДанныеДляУдаления, ИмяОбъекта, Назначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаМетаданных.ИмяТаблицы КАК ИмяТаблицы,
		|	ТаблицаМетаданных.Метаданные КАК Метаданные,
		|	ТаблицаМетаданных.Назначение КАК Назначение,
		|	ТаблицаМетаданных.ИмяТаблицыХранения КАК ИмяТаблицыХранения,
		|	ТаблицаМетаданных.Поле КАК Поле,
		|	ТаблицаМетаданных.ПолеSQL КАК ПолеSQL
		|ПОМЕСТИТЬ Табл
		|ИЗ
		|	&ТаблицаМетаданных КАК ТаблицаМетаданных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Табл.ИмяТаблицы КАК ИмяТаблицы,
		|	Табл.Метаданные КАК Метаданные,
		|	Табл.Назначение КАК Назначение,
		|	Табл.ИмяТаблицыХранения КАК ИмяТаблицыХранения,
		|	Табл.Поле КАК Поле,
		|	Табл.ПолеSQL КАК ПолеSQL
		|ИЗ
		|	Табл КАК Табл
		|ГДЕ
		|	Табл.ИмяТаблицы = &ИмяТаблицы
		|	И Табл.Назначение = &Назначение
		|	И Табл.Поле <> """"";
	
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяОбъекта);
	Запрос.УстановитьПараметр("Назначение", Назначение); 
	Запрос.УстановитьПараметр("ТаблицаМетаданных", ТаблицаМетаданных.Выгрузить());
	
	ДанныеДляУдаления = Запрос.Выполнить().Выгрузить();
		
КонецПроцедуры	  

&НаСервере
Функция КодОрганизации()
	
Возврат "'" + ЗначениеИдентификатораОрганизации + "'";

КонецФункции


&НаСервере
Функция ТабличнаяЧасть()

	Возврат "go
	|DELETE FROM <ИмяТЧ>
	|FROM            <СправочникОрганизации> LEFT OUTER JOIN
	|                         <ИмяДокумента> ON <СправочникОрганизации>._IDRRef = <ИмяДокумента>.<ПолеОрганизация> LEFT OUTER JOIN
	|                         <ИмяТЧ> ON <ИмяДокумента>._IDRRef = <ИмяТЧ>.<ПолеСсылка>
	|WHERE        (<СправочникОрганизации>.<ИдентификаторОрганизации> <> <КодОрганизации>)";  
	

КонецФункции 


&НаСервере
Функция Доки()
	
	Возврат "go
	|DELETE FROM <ИмяДокумента>
	|FROM            <СправочникОрганизации> LEFT OUTER JOIN
	|                         <ИмяДокумента> ON <СправочникОрганизации>._IDRRef = <ИмяДокумента>.<ПолеОрганизация>
	|WHERE        (<СправочникОрганизации>.<ИдентификаторОрганизации> <> <КодОрганизации>)";

КонецФункции 

&НаСервере
Функция ПодчиненныеСправочники()
	
	Возврат "go
	|DELETE FROM <ИмяДокумента>
	|FROM            <СправочникОрганизации> LEFT OUTER JOIN
	|                         <ИмяДокумента> ON <СправочникОрганизации>._IDRRef = <ИмяДокумента>._OwnerID_RRRef
	|WHERE        (<СправочникОрганизации>.<ИдентификаторОрганизации> <> <КодОрганизации>)"; 
	

КонецФункции

&НаСервере
Процедура УдалитьДокументыНаСервере()
	
	ЗаполнитьМетаданные();
	УдалениеДокументов("Документы", "Документ");
	
	Сообщить("Готово удаление документов");	
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументы(Команда)
	УдалитьДокументыНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьРегистрыНакопленияНаСервере()
	
	ЗаполнитьМетаданные();
	УдалениеДокументов("РегистрыНакопления", "РегистрНакопления");
	
	Сообщить("Готово удаление регистров накопления");	
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрыНакопления(Команда)
	УдалитьРегистрыНакопленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьРегистрыСведенийНаСервере()
	
	ЗаполнитьМетаданные();
	УдалениеДокументов("РегистрыСведений", "РегистрСведений");
	
	Сообщить("Готово удаление регистров сведений");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрыСведений(Команда)
	УдалитьРегистрыСведенийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчисткаЖурналовНаСервере()
	
	ЗаполнитьМетаданные();
	УдалениеДокументов("ЖурналыДокументов", "ЖурналДокументов");
	
	Сообщить("Готово. Очищены журналы");	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаЖурналов(Команда)
	ОчисткаЖурналовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегистровРасчетаНаСервере()
	
	ЗаполнитьМетаданные();
	УдалениеДокументов("РегистрыРасчета", "РегистрРасчета");
	
	Сообщить("Очистка регистров расчета");
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегистровРасчета(Команда)
	ОчисткаРегистровРасчетаНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьРегистрыБухгалтерииНаСервере()
	
	ЗаполнитьМетаданные();
	УдалениеДокументов("РегистрыБухгалтерии", "РегистрБухгалтерии");
	
	Сообщить("Очистка регистров бухгалтерии");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРегистрыБухгалтерии(Команда)
	УдалитьРегистрыБухгалтерииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодчиненныеСправочники(Команда)
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСправочникиНаСервере()
	
	ЗаполнитьМетаданные();
	УдалениеДокументов("Справочники", "Справочник");
	
	Сообщить("Удаление справочников");
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСправочники(Команда)
	УдалитьСправочникиНаСервере();
КонецПроцедуры


